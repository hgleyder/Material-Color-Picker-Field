{"version":3,"sources":["../../../src/components/color-picker-field/color-picker-field.jsx"],"names":["ColorPickerField","fullWidth","primaryColor","value","label","placeholder","onChange","color","setColor","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleOnChange","newValue","handleClose","open","Boolean","id","undefined","vertical","horizontal","newColor","hex","Container","styled","div","props","propTypes","PropTypes","string","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { SketchPicker } from 'react-color';\nimport Popover from '@material-ui/core/Popover';\n\nconst ColorPickerField = ({\n  fullWidth, primaryColor, value, label, placeholder, onChange,\n}) => {\n  const [color, setColor] = useState(value);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleOnChange = (newValue) => {\n    onChange(newValue);\n    setColor(newValue);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <Container\n      value={color}\n      primaryColor={primaryColor}\n      fullWidth={fullWidth}\n    >\n      {label && <div className=\"label\">{label}</div>}\n      {/* eslint-disable-next-line */}\n      <div className=\"content\" aria-describedby={id} onClick={handleClick}>\n        {color || <span style={{ color: '#707070' }}>{placeholder}</span>}\n        {color && <div className=\"color-preview\" />}\n      </div>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <SketchPicker\n          color={color}\n          disableAlpha\n          onChangeComplete={newColor => handleOnChange(newColor.hex)}\n        />\n      </Popover>\n    </Container>);\n};\n\nconst Container = styled.div`\n    display: inline-block;\n    min-width: 10rem;\n    width: ${props => (props.fullWidth ? '100%' : 'auto')}; \n    & > .label {\n      color: #707070;\n      font-size: 0.75rem;\n      font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\n    }\n    & > .content {\n      margin-top: 0.5rem;\n      width: 100%;\n      padding-bottom: 0.5rem;\n      border-bottom: 1px solid #707070;\n      color: black;\n      font-size: 1rem;\n      font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\n    }\n    & .color-preview {\n      width: 1rem;\n      height: 1rem;\n      border-radius: 50%;\n      position relative;\n      float: right;\n      right: 0.5rem;\n      background-color: ${props => props.value};\n    }\n`;\n\n\nColorPickerField.propTypes = {\n  /** Field overlay color */\n  primaryColor: PropTypes.string,\n  /** Set the component width as 100% */\n  fullWidth: PropTypes.bool,\n  /** Field Current Value */\n  value: PropTypes.string,\n  /** Field Label */\n  label: PropTypes.string,\n  /** Placeholder text used when no value is selected */\n  placeholder: PropTypes.string,\n  /** onChange method called whenever the value change */\n  onChange: PropTypes.func,\n};\n\nColorPickerField.defaultProps = {\n  primaryColor: '#0097a7',\n  fullWidth: false,\n  value: '',\n  label: '',\n  placeholder: '',\n  onChange: () => {},\n};\n\nexport default ColorPickerField;\n"],"file":"color-picker-field.js"}